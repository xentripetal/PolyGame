using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;

namespace PolyECS.Generator.Tests;

public class AutoSystemGeneratorTests
{
    private const string VectorClassText =
        """

        using PolyECS;
        using PolyECS.Systems;

        namespace TestNamespace;

        public partial class TestSystem : AutoSystem
        {
            [ParamProvider("provided")
            public Query<int> TestQuery(ParamBuilder builder) {
                return builder.QueryBuilder<int>(qb => qb.TermAt(0).In());
            }
        
            public void Run(PolyWorld world, Query<int> provided, [QueryGen([TermMod.In])] Query<float> genQuery) {
            
            }
        }
        """;

    private const string GeneratedHeader =
        """
        //------------------------------------------------------------------------------
        // <auto-generated>
        //     This code was generated.
        //
        //     Changes to this file may cause incorrect behavior and will be lost if
        //     the code is regenerated.
        // </auto-generated>
        //------------------------------------------------------------------------------
        """;

    private const string ExpectedGeneratedClassText =
        $$"""
          {{GeneratedHeader}}

          using PolyECS;
          using PolyECS.Systems;

          namespace TestNamespace
          {
              public partial class TestSystem : AutoSystem
              {
                  private Query<float> _p_genQuery;

                  private Query<int> _p_provided;

                  private PolyWorld _p_world;
          
                  protected override void BuildParameters(ParamBuilder builder)
                  {
                      _p_world = builder.With<PolyWorld>();
                      _p_provided = TestQuery(builder);
                      _p_genQuery = builder.QueryBuilder<float>(b =>
                      
                      {
                        unsafe
                        {
                            QueryBuilder qb = new(b.World);
                            qb.Desc = b.Desc;
                            var queryAttrs = GetType().GetMethod("Run", [typeof(PolyWorld), typeof(Query<int>), typeof(Query<float>)])?.GetParameters()[2].GetCustomAttributes(true).OfType<QueryBuilderAttribute>();
                            foreach (var attr in queryAttrs)
                            {
                                qb = attr.Apply(qb);
                            }
                            b.Desc = qb.Desc;
                        }
                        return b;
                      }
                      );
                  }
          
                  public override void Run(PolyWorld world)
                  {
                      Run(_p_world, _p_provided, _p_genQuery);
                  }
              }
          }

          """;

    [Fact]
    public void GenerateReportMethod()
    {
        // Create an instance of the source generator.
        var generator = new AutoSystemGenerator();

        // Source generators should be tested using 'GeneratorDriver'.
        var driver = CSharpGeneratorDriver.Create(generator);

        // We need to create a compilation with the required source code.
        var compilation = CSharpCompilation.Create(nameof(AutoSystemGeneratorTests),
            new[]
            {
                CSharpSyntaxTree.ParseText(VectorClassText)
            },
            new[]
            {
                // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location),
                MetadataReference.CreateFromFile(typeof(PolyWorld).Assembly.Location)
            });

        // Run generators and retrieve all results.
        var runResult = driver.RunGenerators(compilation).GetRunResult();
        Assert.Empty(runResult.Diagnostics);

        // All generated files can be found in 'RunResults.GeneratedTrees'.
        var generatedFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("TestSystem.g.cs"));

        // Complex generators should be tested using text comparison.
        Assert.Equal(ExpectedGeneratedClassText, generatedFileSyntax.GetText().ToString(),
            ignoreLineEndingDifferences: true, ignoreWhiteSpaceDifferences: true);
    }
}