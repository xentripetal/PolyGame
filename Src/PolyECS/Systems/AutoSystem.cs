namespace PolyECS.Systems;

/// <summary>
/// A system that will have its wiring generated by <see cref="PolyECS.Generator"/>. Deriving classes must be
/// partial and have a method named Run with any parameters that are needed.
///
/// The rules for parameter resolution are
/// <list type="number">
/// <item> If there is a method annotated with [ParamProvider(paramName)] that returns a type that is assignable to the parameter, that will be used. </item>
/// <item> Query{T, ...} will be resolved to a simple query requiring the component types in RW mode. </item>
/// <item> If the type implements IStaticParam, the implementation will be used.</item>
/// <item> If no other rules match, it will be treated as a ResMut or a Res if the param is annotated with in. If the type is annotated as Nullable, It will be treated as an optional res.</item>
/// </list>
/// </summary>
public abstract class AutoSystem : ClassSystem
{ }

/// <summary>
/// Defines a getter for a parameter that can be used in an <see cref="AutoSystem"/>. The method must take an arg of <see cref="ParamBuilder"/> and return
/// the exact type of the named parameter in the <see cref="AutoRunMethod"/>.
/// </summary>
/// <param name="name"></param>
[AttributeUsage(AttributeTargets.Method)]
public class ParamProviderAttribute(string name) : Attribute
{ }

/// <summary>
/// Marks a method in an <see cref="AutoSystem"/> to be used as the target Run method. If none are found, it will default to the first method named "Run".
/// </summary>
[AttributeUsage(AttributeTargets.Method)]
public class AutoRunMethod() : Attribute
{ }

